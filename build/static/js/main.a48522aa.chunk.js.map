{"version":3,"sources":["inputComponents/AddressPicker.js","redux/actions.js","inputComponents/ReceiptType.js","App.js","redux/reducers/receiptType.js","redux/reducers/addressPicker.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["connect","state","console","log","fullAddress","taiwanPostal","TaiwanPostal","updateFullAddress","event","type","props","checkIsAddress","result","city","district","postalCode","updateAddressPicker","useEffect","citys","Object","keys","districts","style","onChange","e","target","value","changeCity","disabled","map","item","key","postalCodes","changeDistrict","outlined","label","receipt","changeReceiptType","receiptType","addTaxId","textId","removeValue","receiptOptions","tag","id","name","checked","margin","onTrailingIconSelect","trailingIcon","role","icon","attributeName","handleCheckbox","includes","changeReceiptOptions","values","useState","checkReceiptType","checkAddressPicker","check","setCheck","checkIsReady","Fragment","desktopColumns","order","phoneColumns","tabletColumns","materialInput","closest","newValue","getAttribute","filter","push","reducer","action","combineReducers","createStore","reducers","store","subscribe","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a48522aa.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport TaiwanPostal from '../data/TaiwanPostalCode.json'\r\n// TextField\r\nimport TextField, { Input } from '@material/react-text-field';\r\nimport '@material/react-text-field/dist/text-field.css';\r\n// Card\r\nimport Card, { CardPrimaryContent, } from \"@material/react-card\"\r\nimport '@material/react-card/dist/card.css'\r\n// react-redux\r\nimport { connect } from 'react-redux'\r\nimport { updateFullAddress } from '../redux/actions'\r\n\r\nconst AddressPicker = (props) => {\r\n    // let [value, setValue] = useState(props.fullAddress)\r\n    // 判斷\r\n    const checkIsAddress = () => {\r\n        let result = false\r\n        if (props.fullAddress.city !== '' && props.fullAddress.district !== '請選擇' && props.fullAddress.postalCode !== '請選擇市/區') {\r\n            result = true\r\n        }\r\n        return props.updateAddressPicker(result)\r\n    }\r\n    // 讓checkIsAddress能同步判斷useState資料\r\n    useEffect(() => {\r\n        checkIsAddress()\r\n    }, [props.fullAddress])\r\n\r\n    // 取得城市值\r\n    const citys = Object.keys(TaiwanPostal)\r\n    // 抓取符合選取的區域(props.fullAddress.city的值會符合選取的條件)\r\n    let districts = Object.keys(TaiwanPostal[props.fullAddress.city])\r\n\r\n    const changeCity = (e) => {\r\n        // console.log(e.target.value)\r\n        console.log('1changeCity', { ...props.fullAddress })\r\n        // setValue({\r\n        //     city: e.target.value,\r\n        //     district: '請選擇',\r\n        //     postalCode: '請選擇市/區',\r\n        // })\r\n        props.updateFullAddress({\r\n            ...props.fullAddress,\r\n            city: e.target.value,\r\n            district: '請選擇',\r\n            postalCode: '請選擇市/區',\r\n        })\r\n    }\r\n    const changeDistrict = (e) => {\r\n        console.log(e.target.value)\r\n        checkIsAddress()\r\n        let postalCodes = TaiwanPostal[props.fullAddress.city][e.target.value]\r\n        props.updateFullAddress({\r\n            ...props.fullAddress,\r\n            district: e.target.value,\r\n            postalCode: postalCodes\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardPrimaryContent style={{ 'padding': '1rem' }}>\r\n                <label>城市=>\r\n                <select\r\n                        onChange={(e) => changeCity(e)}\r\n                        value={props.fullAddress.city}\r\n                    >\r\n                        <option disabled>請選擇</option>\r\n                        {citys.map(item => < option key={item} value={item}> {item}</option>)}\r\n                    </select>\r\n                </label>\r\n                <br />\r\n                <br />\r\n                <label>市/區=>\r\n                <select\r\n                        onChange={(e) => changeDistrict(e)}\r\n                        value={props.fullAddress.district}\r\n                    >\r\n                        <option disabled>請選擇</option>\r\n                        {districts.map(item => <option key={item} value={item}>{item}</option>)}\r\n                    </select>\r\n                </label>\r\n                <br />\r\n                <br />\r\n                <label>\r\n                    <TextField\r\n                        outlined\r\n                        label='郵遞區號'\r\n                    >\r\n                        <Input\r\n                            value={props.fullAddress.postalCode || '請選擇市/區'}\r\n                            disabled={true} />\r\n                    </TextField>\r\n                </label>\r\n            </CardPrimaryContent >\r\n        </Card >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(state)\r\n    return {\r\n        fullAddress: state.fullAddress,\r\n        taiwanPostal: TaiwanPostal,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    updateFullAddress\r\n})(AddressPicker)","// 判斷公司統編是否輸入\r\nexport let changeReceiptType = (event) => {\r\n    console.log('CHANGE_ACtion', event.target.value)\r\n    return {\r\n        type: \"CHANGE_RECEIPT_TYPE\",\r\n        receiptType: event.target.value\r\n    }\r\n}\r\n// 輸入text\r\nexport let addTaxId = (event) => {\r\n    console.log(\"ADD_TAX_ID\")\r\n    return {\r\n        type: \"ADD_TAX_ID\",\r\n        textId: event.target.value\r\n    }\r\n}\r\n// 刪除公司統編\r\nexport let removeValue = (event) => {\r\n    console.log(\"REMOVE_VALUE\")\r\n    return {\r\n        type: \"REMOVE_VALUE\",\r\n        textId: ''\r\n    }\r\n}\r\n// 判斷宅配選項\r\nexport let changeReceiptOptions = (values) => {\r\n    console.log(\"CHANGE_RECEIPT_OPTIONS\", values)\r\n    return {\r\n        type: \"CHANGE_RECEIPT_OPTIONS\",\r\n        receiptOptions: values\r\n    }\r\n}\r\n// 更新地址\r\nexport let updateFullAddress = (event) => {\r\n    console.log('updateFullAddress', event)\r\n    return {\r\n        type: \"UPDATE_FULL_ADDRESS\",\r\n        // fullAddress: event,\r\n        fullAddress: {\r\n            ...event\r\n        }\r\n    }\r\n}","import React from \"react\"\r\n// UI\r\n// Card\r\nimport Card, { CardPrimaryContent, } from \"@material/react-card\"\r\nimport '@material/react-card/dist/card.css'\r\n\r\nimport { Body2, Headline6, } from '@material/react-typography'\r\nimport TextField, { Input } from '@material/react-text-field'\r\nimport MaterialIcon from '@material/react-material-icon'\r\nimport Radio, { NativeRadioControl } from '@material/react-radio';\r\nimport Checkbox from '@material/react-checkbox';\r\n\r\nimport '@material/react-typography/dist/typography.css'\r\nimport '@material/react-text-field/dist/text-field.css';\r\nimport '@material/react-radio/dist/radio.css';\r\nimport \"@material/react-checkbox/dist/checkbox.css\";\r\n// react-redux\r\nimport { connect } from 'react-redux'\r\nimport { changeReceiptType, addTaxId, removeValue } from '../redux/actions'\r\n\r\n\r\nconst ReceiptType = (props) => {\r\n    const { receiptType, textId, receiptOptions } = props.receipt\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardPrimaryContent style={{ 'padding': '1rem' }}>\r\n                    <Headline6 tag='p'>發票類型</Headline6 >\r\n                    <Body2 tag='div'>\r\n                        <label>\r\n                            <br />\r\n                            <Radio label='個人' key=\"personal\">\r\n                                <NativeRadioControl\r\n                                    id=\"personal\"\r\n                                    type=\"radio\"\r\n                                    value=\"0\"\r\n                                    name=\"receiptType\"\r\n                                    onChange={props.changeReceiptType}\r\n                                    checked={receiptType === '0'}\r\n                                />\r\n                            </Radio>\r\n                            <br />\r\n                            <Radio label='公司' key=\"company\">\r\n                                <NativeRadioControl\r\n                                    id=\"company\"\r\n                                    type=\"radio\"\r\n                                    value=\"1\"\r\n                                    name=\"receiptType\"\r\n                                    onChange={props.changeReceiptType}\r\n                                    checked={receiptType === '1'}\r\n                                />\r\n                            </Radio>\r\n                            <TextField\r\n                                style={{ margin: '1rem 0' }}\r\n                                outlined\r\n                                label='統一編號'\r\n                                onTrailingIconSelect={props.removeValue}\r\n                                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\" />}\r\n                            >\r\n                                <Input\r\n                                    disabled={receiptType !== '1'}\r\n                                    value={textId}\r\n                                    onChange={props.addTaxId}\r\n                                />\r\n                            </TextField>\r\n                        </label>\r\n                        <br />\r\n                        <label>宅配選項\r\n                <br />\r\n                            <Checkbox\r\n                                type=\"checkbox\"\r\n                                value=\"byMail\"\r\n                                name=\"receiptOptions[]\"\r\n                                attributeName=\"receiptOptions\"\r\n                                onChange={props.handleCheckbox}\r\n                                checked={receiptOptions.includes('byMail')}\r\n                            />實體寄送\r\n                <br />\r\n                            <Checkbox\r\n                                type=\"checkbox\"\r\n                                value=\"finite\"\r\n                                name=\"receiptOptions[]\"\r\n                                attributeName=\"receiptOptions\"\r\n                                onChange={props.handleCheckbox}\r\n                                checked={receiptOptions.includes('finite')}\r\n                                disabled={\r\n                                    !receiptOptions.includes(\"byMail\")\r\n                                }\r\n                            />限時掛號\r\n            </label>\r\n                    </Body2>\r\n                </CardPrimaryContent>\r\n            </Card>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        receipt: state.receipt\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    changeReceiptType,\r\n    addTaxId,\r\n    removeValue,\r\n})(ReceiptType)","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport AddressPicker from './inputComponents/AddressPicker'\nimport ReceiptType from './inputComponents/ReceiptType'\n// UI\nimport Button from '@material/react-button'\nimport '@material/react-button/dist/button.css'\nimport { Cell, Grid, Row } from '@material/react-layout-grid';\nimport '@material/react-layout-grid/dist/layout-grid.css';\n// redux\nimport { connect } from 'react-redux'\nimport { changeReceiptOptions } from './redux/actions'\n\nconst App = (props) => {\n\n  // 確認傳送data\n  const [check, setCheck] = useState({\n    checkReceiptType: false,\n    checkAddressPicker: false,\n  })\n  // 判斷是否能傳送(submit)\n  const checkReceiptTypeFn = (value) => {\n    setCheck({\n      ...check,\n      checkReceiptType: value\n    })\n  }\n  const checkAddressPickerFn = (value) => {\n    setCheck({\n      ...check,\n      checkAddressPicker: value\n    })\n  }\n  // 判斷按鈕資料 => \n  const checkIsReady = () => {\n    let result = false\n    if (props.state.receipt.receiptType === '0' && props.state.receipt.receiptOptions.includes('byMail')) {\n      result = true\n    } else if (props.state.receipt.receiptType === '1' && props.state.receipt.textId !== '' && props.state.receipt.receiptOptions.includes('byMail')) {\n      result = true\n    }\n    return checkReceiptTypeFn(result)\n  }\n  // 判斷宅配選項\n  const handleCheckbox = (e) => {\n    const materialInput = e.target.closest('.mdc-checkbox');\n    const newValue = materialInput.getAttribute('value')\n    const name = materialInput.getAttribute('attributeName')\n    // 抓取data中receiptOptions資料\n    let values = props.state.receipt[name]\n    // 判斷data.receiptOptions資料中值是否符合\n    checkIsReady()\n    if (values.includes(newValue)) {\n      console.log('符合代表有資料 要刪除')\n      values = values.filter((value) => {\n        return value !== newValue\n      })\n    } else {\n      console.log('不符合無資料 要新增')\n      values.push(newValue)\n    }\n    console.log(values)\n    props.changeReceiptOptions(values)\n  }\n  // 判斷按鈕初始\n  useEffect(() => {\n    checkIsReady()\n  }, [props.state.receipt])\n  // 決定送出鍵是否顯示\n  const isReady = () => {\n    return check.checkReceiptType && check.checkAddressPicker\n  }\n\n  return (\n    <React.Fragment>\n      <form>\n        <Grid>\n          <Row>\n            <Cell desktopColumns={4} order={2} phoneColumns={4} tabletColumns={4}></Cell>\n            <Cell desktopColumns={4} order={2} phoneColumns={4} tabletColumns={4}>\n              <ReceiptType\n                // updateReceiptType={checkReceiptTypeFn}\n                // props.state.receipt={props.state.receipt}\n                // setData={setData}\n                // handleRadio={handleRadio}\n                // checkIsReady={checkIsReady}\n                handleCheckbox={handleCheckbox}\n              // handText={handText}\n              // removeValue={removeValue}\n              />\n              <br />\n            </Cell>\n            <Cell desktopColumns={4} order={2} phoneColumns={4} tabletColumns={4}></Cell>\n          </Row>\n          <Row>\n            <Cell desktopColumns={4} order={2} phoneColumns={4} tabletColumns={4}></Cell>\n            <Cell desktopColumns={4} order={2} phoneColumns={4} tabletColumns={4}>\n              <AddressPicker updateAddressPicker={checkAddressPickerFn} />\n              <br />\n            </Cell>\n            <Cell desktopColumns={4} order={2} phoneColumns={4} tabletColumns={4}></Cell>\n          </Row>\n          <Row>\n            <Cell desktopColumns={4} order={2} phoneColumns={4} tabletColumns={4}></Cell>\n            <Cell desktopColumns={4} order={2} phoneColumns={4} tabletColumns={4}>\n              <Button type=\"submit\" disabled={!isReady()} outlined>確認送出</Button>\n            </Cell>\n            <Cell desktopColumns={4} order={2} phoneColumns={4} tabletColumns={4}></Cell>\n          </Row>\n        </Grid>\n      </form>\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    state\n  }\n}\n\nexport default connect(mapStateToProps, {\n  changeReceiptOptions\n})(App);","let reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE_RECEIPT_TYPE\": {\r\n            return {\r\n                ...state,\r\n                receiptType: action.receiptType\r\n            }\r\n        }\r\n        case \"ADD_TAX_ID\": {\r\n            return {\r\n                ...state,\r\n                textId: action.textId\r\n\r\n            }\r\n        }\r\n        case \"REMOVE_VALUE\": {\r\n            return {\r\n                ...state,\r\n                textId: action.textId\r\n            }\r\n        }\r\n        case \"CHANGE_RECEIPT_OPTIONS\": {\r\n            console.log(action)\r\n            return {\r\n                ...state,\r\n                receiptOptions: action.receiptOptions\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","let reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_FULL_ADDRESS\": {\r\n            console.log('UPDATE_FULL_ADDRESS', action.fullAddress)\r\n            return {\r\n                ...action.fullAddress\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import { combineReducers } from 'redux'\r\nimport receipt from './receiptType.js'\r\nimport fullAddress from './addressPicker.js'\r\n\r\nexport default combineReducers({ receipt, fullAddress })","import { createStore } from 'redux'\r\nimport reducers from './reducers'\r\n\r\nexport default createStore(reducers, {\r\n    receipt: {\r\n        receiptType: '0',\r\n        textId: '',\r\n        receiptOptions: [\"byMail\"],\r\n    },\r\n    fullAddress: {\r\n        city: '台北市',\r\n        district: '請選擇',\r\n        postalCode: '請選擇市/區'\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// redux\nimport store from './redux/store.js'\n// react redux\nimport { Provider } from 'react-redux'\n\nstore.subscribe(() => { console.log('更新', store.getState()) })\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}